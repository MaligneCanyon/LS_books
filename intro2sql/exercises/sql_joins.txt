ex1
SELECT countries.name, continents.name FROM countries JOIN continents ON countries.continent_id = continents.id;

or

SELECT c.name, d.name FROM
countries c JOIN continents d ON c.continent_id = d.id;

ex2
SELECT c.name, c.capital FROM
countries c JOIN continents d ON c.continent_id = d.id WHERE d.name = 'Europe';

ex3
SELECT DISTINCT s.first_name FROM singers AS s
  JOIN albums AS a ON s.id = a.singer_id
  WHERE a.label = 'Warner Bros';

ex4
SELECT singers.first_name, singers.last_name, albums.name, albums.released FROM (singers JOIN albums ON singers.id = albums.singer_id) WHERE (date_part ('year', albums.released) BETWEEN 1980 AND 1989) AND (singers.deceased = false) ORDER BY singers.date_of_birth DESC;

# a bit shorter using aliasing ...
SELECT s.first_name, s.last_name, a.name, a.released 
FROM singers s JOIN albums a ON s.id = a.singer_id 
WHERE (s.deceased = false AND date_part('year', a.released) BETWEEN 1980 AND 1989) ORDER BY s.date_of_birth DESC;

# this works too ...
SELECT s.first_name, s.last_name, a.name, a.released
  FROM singers AS s
  JOIN albums AS a ON s.id = a.singer_id
  WHERE s.deceased = false AND (date_part('year', a.released)::int % 100 / 10 = 8)
  ORDER BY age(s.date_of_birth);

ex5
SELECT s.first_name, s.last_name 
FROM singers s LEFT JOIN albums a ON s.id = a.singer_id 
WHERE a.name IS NULL;

ex6
SELECT s.first_name, s.last_name FROM singers s WHERE s.id NOT IN (SELECT a.singer_id FROM albums a);

# don't need to use the <table>.<col> syntax here; <col> will suffice
SELECT first_name, last_name 
  FROM singers 
  WHERE id NOT IN (SELECT singer_id FROM albums);

ex7
SELECT o.*, p.* FROM orders o
  JOIN order_items oi ON o.id = oi.order_id
  JOIN products p ON oi.product_id = p.id;

# for more meaningful results, use
SELECT oi.order_id, o.order_status, c.name AS "customer", p.name AS "product", p.cost 
FROM orders o JOIN order_items oi ON o.id = oi.order_id
JOIN customers c ON c.id = o.id
JOIN products p ON oi.product_id = p.id;

ex8
SELECT DISTINCT oi.order_id "orders with fries" 
  FROM order_items oi
  JOIN products p ON oi.product_id = p.id
  WHERE p.name = 'Fries';

ex9
# want to JOIN 'customers' and 'orders' before any other joins
SELECT DISTINCT c.name "customers who like fries" 
  FROM customers c
  JOIN orders o ON o.customer_id = c.id 
  JOIN order_items oi ON oi.order_id = o.id
  JOIN products p ON oi.product_id = p.id
  WHERE p.name = 'Fries';

ex10
SELECT sum(p.cost) "order total" 
  FROM customers c
  JOIN orders o ON c.id = o.customer_id
  JOIN order_items oi ON o.id = oi.order_id
  JOIN products p ON oi.product_id = p.id
  WHERE c.name = 'Natasha O''Shea';

# rtns $23.60

ex11
SELECT p.name, count(p.name) FROM products p
  JOIN order_items oi ON p.id = oi.product_id
  GROUP BY p.name;

# could use count(oi.product_id), count(p.id), etc.

